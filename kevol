#!/usr/bin/python3.8


from random import shuffle
from itertools import combinations
from random import choices
from os import path
import argparse


from config import EvolSearchConfig

from fitness import FitnessFunction

from selection import SelectionFunction

from recombination import RecombinationFunction

from bitflapping import BitFlappingFunction

from report import EvolAlgoConfigReport

from report import EvolAlgoExecReport



class EvolSearch:

	'''
		This class implements the evolution search algorithm.

	'''

	def __init__ (self):
		
		# Evolutionary search config file
		# self.evolConfig=None
		
		# Fitness function to be used
		self.fitnessFunction=None


		# Selection function to be used
		self.selectionFunction=None


		# Recombination function to be used
		self.recombinationFunction=None


		# Bit flapping function to be used
		self.bitFlappingFunction=None


		# Config file path
		self.cfgFile=None

		# Holds the configuration objects to be executed
		self.listOfConfigurations=list()


		# Holds the reports of each config
		self.configReports=list()


		# error codes dictionary
		self.errorCodes={
		'NO_CONFIG_FOUND': "No Config File Found",
		'NO_FITNESS_FUNCTION_FOUND':"Fitness Function Not Defined Yet",
		'NO_SELECTION_FUNCTION_FOUND':"Selection Function Not Defined Yet",
		'NO_RECOMBINATION_FUNCTION_FOUND': "Recombination Function Not Defined Yet",
		'NO_BIT_FLAPPING_FUNCTION_FOUND':"Bit Flapping Function Not Defined Yet",
		'EVOLUTION_MAX_LEVEL_REACHED': "Evoltion Maximum Level Reached",
		'BEST_SOLUTION_FOUND':"Best Solution Has Been Found",
		'PREPARING_REPORT': "The Algorithm Report Is Being Prepared",
		'NO_CFG_FILE_PROVIDED': "No Config File Specified Or Config File Does Not Exist",

		'RUNNING_PREDEFINED':'Running Pre-Defined Configuration',
		'CONFIG_OBJECTS_CREATED': 'Configuration Objects Have Been Created For The Algorithm',
		'EVOL_ALGO_STARTED':'Evolutionary Algorithm Has Been Started...\n',
		'REPORT_FILE_EXISTS':'File report.csv Does Exist, Overwrite It? ',
		'NO_REPORT_CREATED': 'No Report File Created Or Corrupted',
		'REPORT_CREATED': 'Report Was Written To report.csv'

				}


		# number of generation evolved
		self.genEvolCnt=0



	def evol_search_log(self,status,mess):

		'''
			This function has implemented the algorithm logging 
			process.

			Logging level can be ERR and INF which represent error and
			informative respectively. 

		'''

		loggingLevel='ERR'

		if status==1:
			loggingLevel='INF'

		print("[{0}] {1} ".format(loggingLevel,mess))




	def parse_evol_config(self,config):
		'''
			This function checks for the config file.
		'''


		self.fitnessFunction=FitnessFunction(config.fitnessFunc).getFitnessFunc()
			


		self.selectionFunction=SelectionFunction(config.selectAlgo).get_selection_func()



		self.recombinationFunction=RecombinationFunction(config.recombineAlgo).get_recomb_func()



		self.bitFlappingFunction=BitFlappingFunction(config.bitFlappingAlgo).get_bitflap_func()




	def generate_init_pop(self,config):
		'''
			This function generates the inital population.

			The size of the population is defined by the parameter'popSize'
			of the config object and the size of the solution is defined
			by the paramter 'problemSize' of the config object.
		'''


		populationList=[]


		for i in range(config.popSize):

			populationList.append(choices([0,1],weights=[1,1],k=config.problemSize))


		return populationList



	def evaluate_generation(self,generation):

		'''
			This function evaluates the generation by using the fitness function
			defined in the config object.

		'''

		# newGeneration is list of tuples that each tuple is as follows:
		# (member of the generation, fitness value)

		newGeneration=self.fitnessFunction(generation)
		

		return newGeneration




	def create_report(self):

		'''
			This function creates report for all the configurations
		'''
		

		# Writing to a csv file

		if path.exists("report.csv"):

			self.evol_search_log(1,self.errorCodes['REPORT_FILE_EXISTS'])

			userAnswer=str()

			while True:
				userAnswer=input("Overwrite?[y/n] ")
				if userAnswer.lower() in 'no n':

					self.evol_search_log(1,self.errorCodes['NO_REPORT_CREATED'])

					exit(0)

				elif userAnswer.lower() in 'y ye yes':
					break



		# Columns of the csv file
		reportColumns=['CFG','CFG_MEAN','CFG_SD','FFC_MEAN','FFC_SD','CFG_BEI','CFG_BEF']

		#TODO
		for i in range(10):
			reportColumns.append("E"+str(i+1)+" BF")
			reportColumns.append("E"+str(i+1)+" ST")
			reportColumns.append("E"+str(i+1)+" FFC")


		# Adding config parameters' columns
		reportColumns=reportColumns+["problemSize","popSize","combProb","mutProb",
						"selectAlgo",
						"recombineAlgo",
						"bitFlappingAlgo",
						"fitnessFunction",
						"maxGenEvol"]



		fhandle=open("report.csv",'w')

		
		# Writing the columns
		fhandle.write(','.join(reportColumns)+"\n")

		# Writing Values

		for configR in self.configReports:
			valueToBeWritten=[]
			valueToBeWritten.append(str(configR.configIndex+1)) # +1 is because indexes are 0-based
			valueToBeWritten.append(str(configR.meanValue))
			valueToBeWritten.append(str(configR.standDev))

			valueToBeWritten.append(str(configR.meanValueFF))
			valueToBeWritten.append(str(configR.standDevFF))

			valueToBeWritten.append(str(configR.bestExecutionIndex))
			valueToBeWritten.append(str(configR.bestExecutionFitness))


			# Adding values of the executions
			for execReport in configR.get_exec_reports():

				valueToBeWritten.append(str(execReport.get_exec_bfitness()))

				valueToBeWritten.append(execReport.get_exec_state())
				valueToBeWritten.append(str(execReport.get_fitness_func_call_count()))


			# Adding values of the configuration parameters
			valueToBeWritten.append(str(configR.get_report_config().problemSize))
			valueToBeWritten.append(str(configR.get_report_config().popSize))
			valueToBeWritten.append(str(configR.get_report_config().combProb))
			valueToBeWritten.append(str(configR.get_report_config().mutProb))
			valueToBeWritten.append(configR.get_report_config().selectAlgo)
			valueToBeWritten.append(configR.get_report_config().recombineAlgo)

			valueToBeWritten.append(configR.get_report_config().bitFlappingAlgo)
			valueToBeWritten.append(configR.get_report_config().fitnessFunc)
			valueToBeWritten.append(str(configR.get_report_config().maxGenEvol))

			# print(len(valueToBeWritten))
			# Writing values 
			fhandle.write(','.join(valueToBeWritten)+"\n")

		self.evol_search_log(1,self.errorCodes['REPORT_CREATED'])

		
		fhandle.close()

		




	def should_b_terminated(self,maxGenEvol,generation,config,execIndex,fitnessFunctionCallCount):


		'''
			This function checks whether the evolution process should be
			terminated or not.

		'''


		# Check the maxEvolCnt in the config object. 

		if config.maxGenEvol==maxGenEvol:
			# self.evol_search_log(1,self.errorCodes["EVOLUTION_MAX_LEVEL_REACHED"])

			# Creating a report object for this execution
			execReport=EvolAlgoExecReport()
			execReport.set_exec_index(execIndex)


			# Calculate the best fitness of the current generation for reporting 
			# purposes.
			bestFitness= ( max(generation, key=lambda tup: tup[1]) )[1] # We want second value


			# Setting the exectition best fitness value
			execReport.set_best_fitness(bestFitness)


			# Setting the fitness function call count
			execReport.set_fitness_func_call_count(fitnessFunctionCallCount)

			# TODO  for the message use diction?
			execReport.set_exec_state("MAX_EVOL_LEVEL_REACHED")

			return execReport


		# check for the best solution which is a string of all 1s like:  11.....111.
		# The number of 1s is defined by the 'problemSize' parameter.

		# Remind that member in this loop, is a tuple of (member,fitnessValue)
		for member in generation:
			if member[0]==[1]*(config.problemSize):
				# self.evol_search_log(1,self.errorCodes["BEST_SOLUTION_FOUND"])

				# self.evol_search_log(1,self.errorCodes["PREPARING_REPORT"])

				# Creating a report object for this execution
				execReport=EvolAlgoExecReport()
				execReport.set_exec_index(execIndex)


				# Calculate the best fitness of the current generation for reporting 
				# purposes.
				bestFitness= ( max(generation, key=lambda tup: tup[1]) )[1] # We want second value


				# Setting the exectition best fitness value
				execReport.set_best_fitness(bestFitness)


				# Setting the fitness function call count
				execReport.set_fitness_func_call_count(fitnessFunctionCallCount)


				execReport.set_exec_state("BEST_SOLUTION_FOUND")



				return execReport


		return None



	def start_evol(self):
		'''
			This function starts the evolution process for all the configurations.
		
		'''
		self.evol_search_log(1,self.errorCodes["EVOL_ALGO_STARTED"])


		# For each config we are going to execute the evolution algorithm
		# for a specific number of rounds.
		it=0
		for idx,config in enumerate(self.listOfConfigurations):
			print(">" + str(it))
			it+=1

			# Create report object for the config
			configReport=EvolAlgoConfigReport(config)



			# Setting the index of the configuration
			configReport.set_config_index(idx)




			# TODO  change the value of 10
			for i in range(10):

				execReport = self.run_evol(config,i)

				# Increment the number of execution
				configReport.execution_increment()

				# Adding the execution report
				configReport.add_execution_report(execReport)


			# After finishing the 10 rounds of execution, calculate the 
			# mean and standard deviation value for the configuration as well
			# as for fitness function calss
			configReport.calculate_statistic_values()



			# Adding the configuration to the list of all config reports.
			self.configReports.append(configReport)









	def run_evol(self,config,execIndex):
		
		'''
			This function runs the evolution algorithm on a specific configuration.
		'''

 
		# check the config file first.
		self.parse_evol_config(config)



	
		# generate the initial population for the first generation
		initPopulation = self.generate_init_pop(config)


		# evaluate the the initial population
		currGeneration=self.evaluate_generation(initPopulation)



		# defines the number of loop execution
		maxGenEvol=0

		# defines the fitness function call count. Initial is 1 since
		# we have called it once before
		fitnessFunctionCallCount=1

	

		while True:

			decision=self.should_b_terminated(maxGenEvol,currGeneration,config,execIndex,fitnessFunctionCallCount)

			# If the report was returned, stop and return the report.
			if decision :

				return decision

			else:

				# Selecting parents from the current generation
				parentsPool=self.selectionFunction(currGeneration)


				# Shuffling the parentsPool
				shuffle(parentsPool)



				# Selecting elements of the parentsPool 2 by 2.
				parentPairs=[(parentsPool[0],parentsPool[1]) for i in range(0,len(parentsPool),2) ]




				# Performing recombination on the parent pairs
				parentsNotMated,offSprings=self.recombinationFunction(parentPairs,config.problemSize,config.combProb)



				# Performing bit flapping on the childs
				self.bitFlappingFunction(offSprings,config.problemSize,config.mutProb)

				

				# Evaluating the offSprings
				evaluatedOffspring=self.evaluate_generation(offSprings)


				# Mixing the offsprings with parents that were'nt mated in this step as
				# the current generation
				
				currGeneration=[*parentsNotMated,*evaluatedOffspring]
					

				# Incrementing the maxGenEvol 
				maxGenEvol+=1

				# Incrementing the fitnessFunctionCallCount
				fitnessFunctionCallCount+=1




	def is_float(self,num):
		'''
			This function checks whether a string is a float or not
		'''
		try:
			float(num)
			return True
		except ValueError:

			return False




	def evol_algo_argument_reader(self):

		'''
			This function implements the command line argument reader
		'''


		parser = argparse.ArgumentParser(description='Evolutionary Algorithm Help')

		parser.add_argument('-f','--file',  type=str, nargs=1,help='Specify A Config File Name')


		args = parser.parse_args()


		self.listOfConfigurations=[]

		if args.file:
			if (args.file)[0].endswith(".cfg") and path.exists(args.file[0]):
				self.cfgFile=args.file[0]


				# Reading the file
				fhandle=open((args.file)[0])

				fileLines=fhandle.readlines()

				fhandle.close()


				for line in fileLines:

					line=line.strip().split(',')

				

				
					# Setting the parameters to be passed to the config object

					# Since some paramters are represented by '-' in the config.cfg,
					# we have to skip these parameters and let the config class decide
					# the value.


					configParams=['problemSize','popSize','combProb','mutProb',
									'selectAlgo','recombineAlgo','bitFlappingAlgo',
									'fitnessFunction','maxGenEvol']


					# Zipping parameter names with their corresponding value
					# in the config.cfg line
					paramTuple=tuple(zip(configParams,line))



					# Eliminating those parameters that their value has been set to
					# '-'

					# Create a lambda function converter that checks whthere we have to use float()
					# or not. The main reason is the numeric values in config.cfg is string
					# and cannot be used to create a config object.

					lambConv=lambda num: num if ( not num.isnumeric() and not self.is_float(num) ) else  ( float(num) if not num.isnumeric() and self.is_float(num) else ( int(num) if (num.isnumeric() and float(num).is_integer()) else float(num) ))  


					paramDict = dict((x, lambConv(y)) for x, y in paramTuple if  y!='-')

					
					

					self.listOfConfigurations.append(EvolSearchConfig(**paramDict))



				self.evol_search_log(1,self.errorCodes['CONFIG_OBJECTS_CREATED'])





		
		if self.cfgFile is None:
			self.evol_search_log(1,self.errorCodes['NO_CFG_FILE_PROVIDED'])
			self.evol_search_log(1,self.errorCodes['RUNNING_PREDEFINED'])

			self.listOfConfigurations.append(EvolSearchConfig(popSize=100,problemSize=20))




evolObj=EvolSearch()


evolObj.evol_algo_argument_reader()


evolObj.start_evol()

evolObj.create_report()
